# Default values for ray-cluster.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# The KubeRay community welcomes PRs to expose additional configuration
# in this Helm chart.

image:
  repository: krickwix/ray-llm-habana
  tag: 1.15.1
  pullPolicy: Always

nameOverride: "omnisr"
fullnameOverride: ""

imagePullSecrets: []
  # - name: an-existing-secret

# common defined values shared between the head and worker
common:
  # containerEnv specifies environment variables for the Ray head and worker containers.
  # Follows standard K8s container env schema.
  containerEnv:
    - name: HABANA_VISIBLE_DEVICES
      value: "all"
    - name: OMPI_MCA_btl_vader_single_copy_mechanism
      value: "none"
    - name: PT_HPU_ENABLE_LAZY_COLLECTIVES
      value: "true"
head:
  image:
    repository: krickwix/ray
    tag: latest
    pullPolicy: Always
  # rayVersion determines the autoscaler's image version.
  # It should match the Ray version in the image of the containers.
  # rayVersion: 2.9.0
  # If enableInTreeAutoscaling is true, the autoscaler sidecar will be added to the Ray head pod.
  # Ray autoscaler integration is supported only for Ray versions >= 1.11.0
  # Ray autoscaler integration is Beta with KubeRay >= 0.3.0 and Ray >= 2.0.0.
  # enableInTreeAutoscaling: true
  # autoscalerOptions is an OPTIONAL field specifying configuration overrides for the Ray autoscaler.
  # The example configuration shown below represents the DEFAULT values.
  # autoscalerOptions:
    # upscalingMode: Default
    # idleTimeoutSeconds is the number of seconds to wait before scaling down a worker pod which is not using Ray resources.
    # idleTimeoutSeconds: 60
    # imagePullPolicy optionally overrides the autoscaler container's default image pull policy (IfNotPresent).
    # imagePullPolicy: IfNotPresent
    # Optionally specify the autoscaler container's securityContext.
    # securityContext: {}
    # env: []
    # envFrom: []
    # resources specifies optional resource request and limit overrides for the autoscaler container.
    # For large Ray clusters, we recommend monitoring container resource usage to determine if overriding the defaults is required.
    # resources:
    #   limits:
    #     cpu: "500m"
    #     memory: "512Mi"
    #   requests:
    #     cpu: "500m"
    #     memory: "512Mi"
  labels: {}
  # Note: From KubeRay v0.6.0, users need to create the ServiceAccount by themselves if they specify the `serviceAccountName`
  # in the headGroupSpec. See https://github.com/ray-project/kuberay/pull/1128 for more details.
  serviceAccountName: ""
  rayStartParams:
    dashboard-host: '0.0.0.0'
  # containerEnv specifies environment variables for the Ray container,
  # Follows standard K8s container env schema.
  containerEnv: []
  # - name: EXAMPLE_ENV
  #   value: "1"
  envFrom: []
    # - secretRef:
    #     name: my-env-secret
  # ports optionally allows specifying ports for the Ray container.
  # ports: []
  # resource requests and limits for the Ray head container.
  # Modify as needed for your application.
  # Note that the resources in this example are much too small for production;
  # we don't recommend allocating less than 8G memory for a Ray pod in production.
  # Ray pods should be sized to take up entire K8s nodes when possible.
  # Always set CPU and memory limits for Ray pods.
  # It is usually best to set requests equal to limits.
  # See https://docs.ray.io/en/latest/cluster/kubernetes/user-guides/config.html#resources
  # for further guidance.
  resources:
    limits:
      cpu: "4"
      memory: "16G"
    requests:
      cpu: "4"
      memory: "16G"
  annotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  # Ray container security context.
  securityContext: {}
  # Optional: The following volumes/volumeMounts configurations are optional but recommended because
  # Ray writes logs to /tmp/ray/session_latests/logs instead of stdout/stderr.
  volumes:
    - name: log-volume
      emptyDir: {}
    - name: models-volume
      # mount /data/foo, but only if that directory already exists
      hostPath:
        path: /scratch-1/data/models # directory location on host
        type: Directory # this field is optional
    - name: omnisr-volume
      # mount /data/foo, but only if that directory already exists
      hostPath:
        path: /scratch-1/data/modeltesting/omnisr # directory location on host
        type: Directory # this field is optional
    - name: data-volume
      # mount /data/foo, but only if that directory already exists
      hostPath:
        path: /scratch-1/data/ds # directory location on host
        type: Directory # this field is optional
  volumeMounts:
    - mountPath: /tmp/ray
      name: log-volume
    - mountPath: /data/models
      name: models-volume
    - mountPath: /omnisr
      name: omnisr-volume
    - mountPath: /mnt/repos/ds/DIV2K/
      name: data-volume
  # sidecarContainers specifies additional containers to attach to the Ray pod.
  # Follows standard K8s container spec.
  sidecarContainers: []
  # See docs/guidance/pod-command.md for more details about how to specify
  # container command for head Pod.
  command: []
  args: []
  # Optional, for the user to provide any additional fields to the service.
  # See https://pkg.go.dev/k8s.io/Kubernetes/pkg/api/v1#Service
  headService: {}
    # metadata:
    #   annotations:
    #     prometheus.io/scrape: "true"


worker:
  # If you want to disable the default workergroup
  # uncomment the line below
  # disabled: true
  hostIPC: true
  image:
    repository: krickwix/ray-llm-habana
    tag: 1.15.1
    pullPolicy: Always

  groupName: workergroup
  replicas: 1
  minReplicas: 1
  maxReplicas: 1
  labels: {}
  serviceAccountName: ""
  rayStartParams: {}
  # containerEnv specifies environment variables for the Ray container,
  # Follows standard K8s container env schema.
  containerEnv: []
  # - name: EXAMPLE_ENV
  #   value: "1"
  envFrom: []
    # - secretRef:
    #     name: my-env-secret
  # ports optionally allows specifying ports for the Ray container.
  # ports: []
  # resource requests and limits for the Ray head container.
  # Modify as needed for your application.
  # Note that the resources in this example are much too small for production;
  # we don't recommend allocating less than 8G memory for a Ray pod in production.
  # Ray pods should be sized to take up entire K8s nodes when possible.
  # Always set CPU and memory limits for Ray pods.
  # It is usually best to set requests equal to limits.
  # See https://docs.ray.io/en/latest/cluster/kubernetes/user-guides/config.html#resources
  # for further guidance.
  resources:
    limits:
      cpu: "20"
      memory: "64G"
      habana.ai/gaudi: "4"
    requests:
      cpu: "20"
      memory: "64G"
      habana.ai/gaudi: "4"
  annotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  # Ray container security context.
  securityContext: {}
  # Optional: The following volumes/volumeMounts configurations are optional but recommended because
  # Ray writes logs to /tmp/ray/session_latests/logs instead of stdout/stderr.
  volumes:
    - name: log-volume
      emptyDir: {}
    - name: data-volume
      # mount /data/foo, but only if that directory already exists
      hostPath:
        path: /scratch-1/data/ds # directory location on host
        type: Directory # this field is optional
    - name: omnisr-volume
      # mount /data/foo, but only if that directory already exists
      hostPath:
        path: /scratch-1/data/modeltesting/omnisr # directory location on host
        type: Directory # this field is optional
  volumeMounts:
    - mountPath: /omnisr
      name: omnisr-volume
    - mountPath: /tmp/ray
      name: log-volume
    - mountPath: /mnt/repos/ds/DIV2K/
      name: data-volume
  # sidecarContainers specifies additional containers to attach to the Ray pod.
  # Follows standard K8s container spec.
  sidecarContainers: []
  # See docs/guidance/pod-command.md for more details about how to specify
  # container command for worker Pod.
  command: []
  args: []

# Configuration for Head's Kubernetes Service
service:
  # This is optional, and the default is ClusterIP.
  type: ClusterIP
